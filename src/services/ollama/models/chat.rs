use serde::{Deserialize, Serialize};

use super::{base::{BaseRequest, Message}, tool::Tool};


/// Request for the `/api/chat` endpoint.
#[derive(Serialize, Debug, Clone, Deserialize)]
pub struct ChatRequest {
    #[serde(flatten)]
    pub base: BaseRequest,
    pub messages: Vec<Message>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tools: Option<Vec<Tool>>,
}


/// Response from the `/api/chat` endpoint.
///
/// This structure represents a single chat response object. If streaming is disabled,
/// it contains the full message. If streaming is enabled, multiple `ChatResponse`
/// objects will be received (each containing a chunk of the message), with the
/// final one containing the performance statistics.
#[derive(Deserialize, Serialize, Debug, Clone)]
pub struct ChatResponse {
    /// The model name used for the chat.
    pub model: String,
    /// The timestamp when the response was created.
    pub created_at: String,
    /// The message generated by the model. This might be a partial message if streaming.
    pub message: Message,
    /// Indicates if this is the final response (`true`) or part of a stream (`false`).
    pub done: bool,
    /// A reason for why the generation finished. This is only present when `done` is `true`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub done_reason: Option<String>,
    /// Time spent generating the response (nanoseconds). Present only if `done` is `true`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_duration: Option<u64>,
    /// Time spent loading the model (nanoseconds). Present only if `done` is `true`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub load_duration: Option<u64>,
    /// Number of tokens in the prompt. Present only if `done` is `true`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prompt_eval_count: Option<u32>,
    /// Time spent evaluating the prompt (nanoseconds). Present only if `done` is `true`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prompt_eval_duration: Option<u64>,
    /// Number of tokens in the response. Present only if `done` is `true`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub eval_count: Option<u32>,
    /// Time spent generating the response (nanoseconds). Present only if `done` is `true`.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub eval_duration: Option<u64>,
}


#[derive(serde::Serialize, serde::Deserialize, Debug, Clone)]
pub struct ChatStreamChunk {
    pub model: String,
    pub created_at: String,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<Message>,
    pub done: bool,

    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub done_reason: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub total_duration: Option<u64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub load_duration: Option<u64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prompt_eval_count: Option<u32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prompt_eval_duration: Option<u64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub eval_count: Option<u32>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub eval_duration: Option<u64>,
}

